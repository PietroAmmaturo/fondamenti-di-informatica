X = 111001110_2C2
Y = 4F_16MS

riduco X --> X = 1001110_2C2

converto Y

Y_2MS = 01001111 = Y_2C2

4 = 0100
F = 1111

per effettuare l' algebra estendo in segno X
X = 11001110

X + Y =
..1..111.
.........
..11001110+
..01001111
..--------
..00011101

non si verifica overflow: segni discordi

-Y = 10110001
X - Y = X + (-Y) =
...........
...........
..11001110+
..10110001
..--------
..01111111

si verifica overflow: operandi negativi, segno positivo

X + Y = 011101 no overflow

X - Y = 01111111 overflow

####################################################################################

Z = c1540000

Z_2 = 1100 0001 0101 0100 0000 0000 0000 0000

segno: 1
esponente: 10000010
mantissa: 101010...

il numero è 1.mantissa * esponente
ovvero 1.10101 * esponente

converto l' esponente
10000010_2 = 130_10 --> 130 - 127 = 3

devo spostare la virgola di tre posti per trovare il numero in virgola mobile:

Z_2 = 1101.01

converto Z in decimale

int = 1101_2 = 8 + 4 + 1 = 13

dec = .01 = 1/4 = 0.25

Z_10 = 13.25

######################################################################################àà

char * crop(char frase[], char ch)
{
  int indexfirst, indexsecond;
  int occorrenze;
  int len;
  char * ris;

  occorrenze = 0;
  for(i = 0; frase[i] != '\0' && (occorrenze < 2); i++){
    if(frase[i] == ch){
      occorrenze++
      if(occorrenze == 1)
        indexfirst = i;
      else
        indexsecond = i;
    }
  }

  if (occorrenze < 2)
    return NULL;

  len = indexsecond - indexfirst;
  indexfirst++; /*ora indexfirst rappresenta il primo elemento dell'array risultato*/
  if(ris = malloc(sizeof(char) * len)){
    *(ris + len - 1) = '\0';
    for(i = 0; *(ris + i) != '\0'; i++){
      *(ris + i) = frase[indexfirst + i];
    }
  } else {
    printf("errore nell'allocazione di memoria per %d char", len);
  }
  return ris;
}

int main (int argc, char * argv[])
{
  char * cropped;
  if(argc == 2){
    cropped = crop(argv[1], argv[2]);
    printf("%s", cropped);
  } else
      printf("si aspettavano 2 valori da riga di comando");
  return 0;
}

###################################

int fileStatus(char nome[])
{
  FILE * fp;
  int ris;

  if(fp = fopen(nome, "r")){
    fclose(fp);
    ris = 1;
  } else if(fp = fopen(nome, "w")){
    fclose(fp);
    ris = 0;
  } else {
    ris = -1;
  }
  return ris;
}

########################################àààà


typedef struct elem1_s {
  int info;
  struct elem1_s * next;
} list1_t;

typedef struct elem2_s {
  int info;
  int cont;
  struct elem2_s * next;
} list2_t;

list2_t * compactlist (list1_t * h)
{
  list1_t * p1;
  list2_t * head, * p2;
  int tmp;

  head = NULL;
  p1 = h;
  while (p1) {
    head = increasing(head, p1->info);
    p1 = p1->next;
  }
  p2 = head;
  while (p2) {
    tmp = p2->val;
    p2->cont = 0;
    while (p2->next->val == tmp) {
     p2->cont++;
     p2 = pop(p2);
    }
  p2 = p2->next;
  }
  return head;
}

list2_t * compactlist (list1_t * h)
{
  list1_t * p1;
  list2_t * head, * tmp;
  int tmp;

  head = NULL;
  
  p1 = h;
  while (p1) {
    if (tmp = exists(head, p1->info))
      tmp->cont++;
    else {
      head = increasing(head, p1->info);
      tmp = exists(head, p1->info);
      tmp->cont = 1;
    }
  }
  return head;
}