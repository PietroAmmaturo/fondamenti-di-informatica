A = +63_10MS
B = 11111112C2

+63_10MS = 0111111_2MS = 0111111_2C2

conversione del modulo
|A| = 63_10 = 111111_2
63 1
31 1
15 1
07 1
03 1
01 1
00

A = 111111_2C2
B = 1111111_2C2

per aritmetica estendo A in segno

A + B = 
.......1111111

        1111111+
        0111111=
        -------
........1111110

operandi con segno discorde: non si è verificato overflow

A - B = A + (-B)=
-B = 0000001

    111111
    0111111+
    0000001=
    -------
    1000000

operandi con segno positivo, risultato negativo: si è verificato overflow

X + Y = 1111110_2C2 non c' è stato overflow
A - B = 1000000_2C2 c'e stato overflow



-20.3125_10MS

lo converto in virgola fissa

parte intera

20_10 = 10100_2

20 0
10 0
05 1
02 0
01 1
00

parte decimale
0.3125_10 = 1010

3125 0
6250 1
2500 0
5000 1
0000

non si verifica errore, poichè non vi sono più contributi 
20.3125_10 = 1010.0101

sposto la virgola di 3 posizioni a sinistra, l'esponente è quindi 3

ma sappiamo che il vero esponente è exp = k + 2^(8-1) - 1 = 4 + 127 = 130

|131| = 10000010

130 0
65 1
32 0
16 0
08 0
04 0
02 0
01 1

exp = 10000010
mantissa = 0100101 = estendo =  01001010000000000000000

il segno è negativo, quindi il risultato è

1 10000010 01001010000000000000000

separo i bit 4 per volta

1100 0001 0010 0101 0000 0000 0000 0000

1100 = 4 + 8 = 12 = b_16

0001 = 1 = 1_16

0010 = 2 = 2_16

0101 = 4 + 1 = 5 = 5_16

gli altri sono zeri

A_IEE754 = 11000001001001010000000000000000
A_IEE754H = b1250000



333333333333333333333333333333333333333


#define LEN 25
int main(int argc, char * argv[])
{
  int num[LEN];
  int i, j, k;
  int maxprod;
  int prod;
  
  for(i = 0; i < LEN; i++)
    scanf("%d", &num[i]);

  for(i = 0; i < (LEN - 2); i++)
    for(j = i + 1; j < (LEN - 1); j++)
      for(k = j + 1; k < LEN; k++){
        prod = num[i] * num[j] * num[k];
        if (prod > maxprod)
          maxprod = prod;
      }

  printf("%d", maxprod)
  
  return 0;
}

char * rep(char s[], int n)
{
  int i, len;
  
  for(i = 0; s[i] != '\0', i++)
   ;

  len = i;
  
  if (new = malloc(sizeof(char) * ((len * n) + 1)){
    for(i = 0; i < n; i++)
      for(j = 0; s[j] != '\0'; j++)
        *(new + j + (i * len)) = s[j];
    s[len * n] = '/0';
  }
  else
    printf("rep: errore nell'allocare memoria per %d caratteri\n", (len * n) + 1);

  return new;
}

int main(int argc, char* argv[])
{
  char * stringa, * nuovastringa;
  int numero;
  if (argc == 2) {
    stringa = *argc[1];
    numero = *argc[2];
    nuovastringa = rep(stringa, numero);
    printf("%s", nuovastringa);
  } else {
    printf("errore: inserire due valori da riga di comando");
  }
  return 0;
}
typedef struct elem_t{
  int info;
  struct elem_t * next;
} list_t;

int kcon(list_t * h)
{
  if (h = NULL || h->next = NULL)
    return 0;
  if (h->info == h->next->info)
    return 1;
  return kcon(h->next);
}

int knocon(list_t * h)
{
  list_t * p;
  int val;
  
  if (h = NULL)
    return 0;
  p = h->next;
  val = h->info;
  while(p){
    if(p->val == val)
      return 1;
    p = p->next;
  }

  return knocon(h->next);
}



typedef struct elem_t{
  char info;
  struct elem_t * next;
} clist_t;

clist_t * eliminaSottosequenze(clist_t * h)
{
  clist_t * p, tmp;
  
  p = h;
  while (p && p->next) {
    if (p->info == '('){
      while(p->next->info != ')'){
        tmp = p->next;
        p->next = p->next->next;
        free(tmp);
      }
      if (tmp = malloc(clist_t)){
        tmp->info = '#';
        tmp->next = p->next;
        p->next = tmp;
      }
    } else {
      printf("eliminaSottosequenze: errore allocazione memoria 1 elemento del tipo clist_t");
    }

    p = tmp->next->next; 
  }






.