A = -32_16
B = +15_10

2_16 = 0001_2
3_16 = 0011_2

|A|= 00110001
A_2MS = 100110001, riduco il numero di bit A = 1110001
-->A_2C2 = -0110001 = 1001111

|B| = 1111
15 1
07 1
03 1
01 1
0

B_2MS = 01111 -->B_2C2 = 01111

A + B =
  
     111

  1001111+
  0001111
  -------
  1011110

segni discordi, niente overflow

A - B = A + (-B) =

  111111
  1001111+
  1110001
  -------
  1000000

segni negativi e risultato negativo, niente overflow



void ruotaStringa(char s[])
{
  char c;
  int i;

  c = s[0];
  for(i = 0; s[i] != '\0'; i++)
    s[i] = s[i+1];

  s[i-1] = c;

 return NULL;
}

int cifreDivisori(int num)
{
  int tmp;
  int cifra;
  int cont;

  cont = 0;
  tmp = num;
  while (tmp > 0){
    cifra = tmp % BASE;
    if (num % cifra == 0)
      cont++;
    tmp = tmp / base;
  }
  
  return cont;
}


int èbuffa (char s[])
{
  int i, len, len1, dif1, dif2;
  
  for (i = 0; s[i] != '\0'; i++)
    ;
  len = i;
  
  len1 = len-1;
  for (i = 0; i < len1; i++){
    dif1 = abs(s[i] - s[i + 1]);
    dif2 = abs(s[len - i] - s[len1 - i]);
    if (dif1 != dif2)
      return 0;
  }
  return 1;
}

#define MAX_LEN 10
int main (int argc, char * argv[])
{
  char s[MAX_LEN];

  scanf("%d", s);
  
  ris = èbuffa(s);

  printf("%d", ris);

  return 0;

}

//arrivato qui in un ora circa

typedef struct elem_t {
  int info;
  struct elem_t * next;
}

list_t selectitems(list_t * h, int min, int max)
{
  list_t * p;
  list_t * newh;

  newh = NULL;
  p = h;
  while (p != NULL){
    if (p->info < max && p->info > min)
      newh = insertup(newh, p->info);
    p = p->next;
  }

  return newh;
}