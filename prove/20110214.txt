A = -33_10
B = -28_10

|A| = 0100001_2C2
33 1
16 0
08 0
04 0
02 0
01 1
0
A = -|A| = 1011111_2C2

|B| = 011100_2C2
28 0
14 0
07 1
03 1
01 1
00
B = -|B| = 100100_2C2

estendo in segno B = 1100100
A + B
..........
.1........
..1011111+
..1100100=
..-------
..0111111

operandi negativi, risultato positivo --> si verifica overflow

-B = 0011100
A - B = A + -B
...111.....
..1011111+
..0011100=
..--------
..1111011

operandi discordi --> non si verifica overflow

int caratterizza(char s[])
{
  int i;
  int cont, max;

  cont = 0;
  max = 0;
  if(s[0] != '\0')
    for (i = 0; s[i + 1] != '\0'; i++)
      if(s[i + 1] < s[i])
        cont++;
      else {
        if(max < cont)
          max = cont;
        cont = 0;
      }
  return max;
}

#define MAXLEN 30
int main(int argc, char * argv[])
{
  char nome[MAXLEN + 1];
  int n;
  int i;
  int num;
  long long tot;
  FILE * fp;

  fp = fopen(nome, "r");
  if (fp) {
    tot = 1;
    while(fscanf(fp, "%d", num) != EOF){
      tot *= num;
    }
    half = tot / 2;
    for(i = 0; i <= half; i++)
      if(num % i == 0)
        n++;
    }
    printf("%d", n % 10);
    fclose(fp);
  } else
    printf("errore apertura file");
  return 0;
}

typedef struct elem_s {
  char car;
  int cont;
  elem_s * next;
} list_t;

type * (char s[])
{
  type * h;
  h = NULL;
  int i;

  for(i = 0; s[i] != '\0'; i++) {
    pos = find(s[i], h);
    if(!pos){
      append(s[i], h);
    } else {
      (pos->cont)++;
    }
  return h;
}

list_t * append(list_t * h)
{
  list_t * p;

  tmp = malloc(sizeof(list_t))
  if(tmp){
    tmp->next = NULL;
    tmp->cont = 1;
    p = h;
    if (p) {
      while (p->next) 
        p = p->next;
      p->next = tmp;
    } else {
      h = tmp;
  } else
    printf("errore allocazione memoria");
  return h;
}

list_t * find(char val, list_t * h)
{
  list_t * p;
  p = h;
  while (p && p->info != val)
    p = p->next;
  return p;
}

void visualizza(int * mat, int nr, int nc, int i)
{
  for(conti = 0; conti < nr; conti++) {
    if(*(mat + (conti * nc) + i) == 1) 
      for(contj = 0; contj < nc; contj++)
        printf("%d ", *(mat + (conti * nc) + contj));
  }
  printf("\n");
  for(contj = 0; contj < nc; contj++) {
    if(*(mat + (i * nc) + contj) == 1)
      for(conti = 0; conti < nr; conti++)
        printf("%d ", *(mat + (conti * nr) + contj));
  }
}