list_t * eliminaduplicati(list_t * h)
{
  list_t * p;
  p = h;
  while (p) {
    p->next = delete(p->next, p->info);
    p = p->next;
  }
  return h;
}

list_t * delete(list_t * h)
{
  list_t * p, *tmp;

  if (h) {
    p = h;
    while (p && p->info == val) {
      tmp = p;
      h = tmp->next;
      free (p);
    }
    if(p)
    while (p) {
      while (p->next && p->next->info == val) {
        tmp = p->next;
        p->next = tmp->next;
        free(tmp);
      }
      p = p->next;
    }
  }
  return h;
}

void combinazionistringa(char stringa[])
{
  int len;
  int i, j;
  len = strlen(stringa);
  for(i = 0; i < len; i++) {
    for(j = 0; stringa[j] != '\0'; j++) {
      combinazioni(&stringa[j], i);
    }
  }
}

void combinazioni(char s[], int dim)
{
  int i;
  
  if(dim <= strlen(s)) {
    for(i = 0; i < dim; i++) {
      printf("%c", s[i]);
    }
    printf("\n");
  }
}


#define N 10
#define N 10
int main(int argc, char * argv[])
{
  int n;
  char * s;
  int i; 
  do {
    scanf("%d", &n);
  } while (n > N || n < 1);
  
  if(s = malloc(sizeof(char) * (n + 1))){
    *(s + n) = '\0';
    for(i = 0; i < n; i++)
      *(s + i) = '0';
    combinazionisimboli(s, 0);
  }
  return 0;
}

void combinazionisimboli(char * s, int cont)
{
  if(s[cont] != '\0') {
    s[cont] = '+';
    combinazionisimboli(s, cont + 1);
    s[cont] = '-';
    combinazionisimboli(s, cont + 1);
  } else {
     printf("%s\n", s);
  }
}
