A = -28_10
B = -11_10

|A| = 011100_2C2
28 0
14 0
7 1
3 1
1 1
0
A = -|A| = 100100_2C2

|B| = 01011_2C2
11 1
5 1
2 0
1 1
0
B = -|B| = 10101_2C2

A + B
........
....1...
..100100+
..110101=
..------
..011001

operandi negativi risultto positivo: si verifica overflow

A + -B
.........
.........
..100100+
..001011=
..------
..101111

operandi discordi: non si verifica overflow

########################################################################################

#define MAXLEN 26
#define MAXNAME 50
int main(int argc, char * argv[])
{
  char s[MAXLEN + 1];
  char fname[MAXNAME + 1];
  int cont[MAXLEN];
  char tmp;
  FILE * fp;

  scanf("%s %s", s, fname);
  if (fp = fopen(fname, "r")) {
    for (i = 0; i < s[i] != '\0'; i++)
      cont[i] = 0;
    while(fscanf("%c", &tmp) != EOF) {
      for (i = 0; s[i] != '\0'; i++)
        if (s[i] == tmp)
          cont[i]++;
    }
    fclose (fp);
    for (i = 0; s[i] != '\0'; i++)
      printf("%c: %d ", s[i], cont[i]);
  } else
    printf("errore apertura file");
  return 0;
}

typedef struct {
  int num;
  int den;
} frac_t;

typedef struct elem_s {
  frac info;
  struct elem_s * next;
} list_t;

int containferiori(list_t * h, frac soglia)
{
  list_t * p;
  float limit, tmp;
  int cont;

  limit = frac.num / (float)frac.den;
  cont = 0;
  p = h;
  while (p) {
    tmp = (p->info).num / (float)(p->info).den;
    if (tmp < limit)
      cont++;
    p = p->next;
  }
  return cont;
}

int fractcompare(fract_t n1, fract_t n2)
{
  float val1, val2;
  int ris;

  val1 = n1.num / (float)n1.den;
  val2 = n2.num / (float)n2.den;

  if (val1 < val2)
    ris = -1;
  else if (val2 < val1)
    ris = 1;
  else
    ris = 0;
  return ris;
}

frac_t newfract(int num, int den)
{
  frac_t new;
  
  new.num = num;
  new.den = den;
 
  return new;
}