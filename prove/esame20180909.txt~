X = -57_16MS
Y = 111001110_2C2

converto X
5 = 0101
7 = 0111

|X|_MS = 01010111 = |X|_2C2

X_2C2 = 10101001, è già rappresentato con il numero minimo di bit

Y = 111001110 --> riduco --> 1001110

per l'algebra, estendo Y in segno: Y = 11001110
X + Y =
..........
.1...1....
..10101001+
..11001110=
..--------
..01110111

Si verifica overflow: operandi negativi e risultato positivo

X - Y = X + (-Y)
-Y = 0110010 --> estendo --> 00110010
..........
...1......
..10101001+
..00110010=
..--------
..11011011

non si verifica overflow: operandi discordi

X_2C2 = 10101001

Y_2C2 = 1001110

X + Y = 01110111 overflow

X - Y = 1011011 no overflow



Z_16 = 41540000
z_2 = 0100 0001 0101 0100 0000 0000 0000 0000

segno = 0
esponente = 1000 0010
mantissa = 101010...

10000010_2 = 128 + 2 = 130_10

il vero esponente è 130 - 127 = 3

si sposta la virgola di tre posti

1.101010 --> 1101.010

converto la parte intera

1101_2 = 8 + 4 + 1 = 13_10

converto la parte decimale

.010_2 = 1/2 = 0.5

Z_10MS = +13.5



char * crop(char frase[], char ch)
{
  int i, dimnew, dimnew1, cont, index1, index2;
  char * new;

  cont = 0;
  for(i = 0; frase[i] != '\0' && cont < 2; i++){
    if(frase[i] == ch && cont == 0){
      cont++;
      index1 = i;
    }
    if(frase[i] == ch && cont == 1){
      cont++;
      index2 = i;
    }
  }
  
  dimnew = (index2 - index1) + 2;
  if(cont == 2){
    if(new = malloc(sizeof(char) * dimnew)){
      dimnew1 = dimnew - 1;
      *(new + dimnew1) = '\0';
      for(i = 0; i < (dimnew1); i++)
        *(new + i) = frase[index1 + i];
    } else {
      printf("errore allocazione memoria per %d caratteri", dimnew);
    }
  } else {
    new = NULL;
  }
  return new;
}

int main(int argc, char* argv[])
{
  char * nuovo;
  if(argc == 2){
    nuovo = crop(*argv[1], *argv[2]);
    printf("%s\n", nuovo);
  } else {
    printf("si aspettano 2 valori da riga di comando");
  }
  return 0;
}

int statoFile(char nome[])
{
  FILE * fp;
  int ris;
  char c;

  if(fp = (nome, "r")){
    if(fscanf(fp, "%c", c) != EOF)
      ris = 0;
    else
      ris = 1; 
    fclose(fp);
  } else {
    ris = -1;
  }
  return ris;
}

typedef struct elem_s{
  int info;
  struct elem_s * next;
}

list_t * exstract(list_t * h, int start)
{
  list_t * p, * newh;
  int bit;

  newh = NULL;

  bit = start;
  p = h;
  while (p != NULL){
    for(i = 0; i < p->info; i++)
      newh = append(newh, bit);
    bit = 1 - bit;
    p = p->next;
  }
  return newh;
}

sizeof(int)

NUM * sizeof(int) + sizeof(int)

sizeof(int*) + (sizeof(int) * 2) + (ndati * sizeof(int))

(sizeof(int) * 3) + sizeof(t_listi *) + (sizeof(t_listi) * ndati)