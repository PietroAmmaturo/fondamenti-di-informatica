A =  -5810MS
B = +5810MS

+582MS = 0111010
-582MS = 1111010
58/2 = 29/2 = 14/2 = 7/2 = 3/2 = 1/2 = 0

+58C2 = 582MS = 0111010

-58C2 = 10000000-
	 0111010
        ________
         1000110

a+b 0111010+
    1000110=
    _______
    0000000

non si verifica overflow: i segni sono discordi

                          11 1  
a-b= 0111010 - 1000110 = 0111010+
                         0111010=
                         _______
                         1110100
il risultato è un numero negativo, si verifica overflow, poichè gli operandi sono positivi

#include <stdio.h>
#include <file.h>

#define F_OUT

typedef struct elem_s{
  int val;
  int ndiv;
  struct *elem_s next;
} int_l

int contaDivisori(int val);

int main(int argc, char * argv[])
{
  FILE *fp;
  int num;
  int_l h;
  h = NULL;
  int ncoppie;

  scanf("%d", num);
  while (num > 0){
    h = append(h, num);
    scanf("%d", num);
  }
  
  while (p != NULL){
    p->ndiv = contaDivisori(p->val);
    p = p->next;
  }
  
  ncoppie = 0;
  if(fp = fopen(F_IN, "w"){
    while (p != NULL){
    fprintf(fp, "%d ", p->val);
    fprintf(fp, "%d\n", p->ndiv);
    ncoppie++;
    p = p->next;
    }
   fclose(fp);
  } else {
    printf("errore");
  }
  
  printf("%d\n", ncoppie);
  
 return 0;
}

int contaDivisori(int val)
{
  int i;
  int half;
  int cont;

  half = val/2;
  cont = 0;
  for(i = 0; i <= half; i++)
    if (val % i == 0)
      cont++;

  return cont;
}

int_l * append(int_l * h, int num){
  int_l * p;
  int_l * new;
  
  if (new = malloc(int_l)){
    new->val = num;
    new->next = NULL;
    if (h != NULL){
      p = h;
      while (p->next != NULL)
        p = p->next;
      p->next = new;
    } else 
      h = tmp;
  } else {
    printf("append: essore nella malloc");
  }

  return h;
}

int proprietà (float * mat, int nr, int nc)
{
  int ris, i ,j;
  
  termine = 1;
  for (i = 0; i < nr  && termine; i++)
    for (j = 0; j < nc   && termine; j++)
      if((*(mat + j + (nc*i)) > 5) || (*(mat + j + (nc*i)) < 1))
        termine = 0;

  return termine;
}

int checkisbn(char isbn[])
{
  int i, j, ris, sommacifre, sommasomme;
  for(i = 0; isbn[i] != '/0'; i++)
    for(j = 0; isbn[j] <= i; j++)
      sommacifre += (isbn[j] - '0');
  sommasomme += sommacifre;
  
  ris = !(sommasomme % 11);

  return ris;
}

int main(int argc, char * argv[])
{
  int ris
  if(argc == 1){
    ris = checkisbn(*(argv[1]));
    printf("%d", ris);
  } else {
    printf("inserire un solo valore");
  }
  
  return 0;
}


typedef struct elem_s {
  int val;
  struct * elem_s next;
}

list_t * deleteWithLimit(list_t*head; int val; int limit){
  int occorrenze;
  list_t*p;
  
  p = head;
  while (p != NULL){
   occorrenze = contaOccorrenze(head, p->val);
   if (occorrenze < limit);
     h = delete(head, p->val);
  }
  
  return h;
}

contaOccorrenze(list_t * h; int val)
{
  list_t * p;
  cont;
  
  cont = 0;
  p = h;
  while(p != NULL){
    if(val == p->val)
      cont++;
    p = p->next;
  }
  return cont;
}

list_t * delete(list_t * h; int val)
{
  list_t * p, *tmp;
  
  while(h != NULL && h->val == val) {
    tmp = h;
    h = h->next
    free(tmp);
  }
  p = h;
  while(p != NULL && p->next != NULL) {
    while(p->next->val == val){
      tmp = p->next;
      p->next = p->next->next;
      free(tmp);
    }
    p = p->next;
  }

  return h;
}

val sizeof(int)
v N * sizeof(int)
dv sizeof(int*) + sizeof(int)
head N * (sizeof(list_t)) ovvero N * (sizeof(int*) + sizeof(int))